<?php
namespace Modules\Apartment\Controllers;

use App\Libraries\LibApartment;
use CodeIgniter\HTTP\RequestInterface;
use CodeIgniter\HTTP\ResponseInterface;
use Psr\Log\LoggerInterface;
use ZipArchive;

class Downloader extends BaseController
{
    public function initController(RequestInterface $request, ResponseInterface $response, LoggerInterface $logger)
    {
        parent::initController($request, $response, $logger); // TODO: Change the autogenerated stub
    }


    public function preview()
    {
        $districts = [0 => 'Chọn quận'];

        foreach ($this->LibApartment->getDistrict() as $d) {
            $districts[$d->code] =  $d->name;
        }

        $dropdown_district = form_dropdown("dropdown-district",$districts,"",  [
            'class' => 'form-control select2',
            'id' => 'dropdown-district'
        ]);


        return view('\Modules\Apartment\Views\downloader\preview',[
            'dropdown_district' => $dropdown_district
        ]);
    }

    public function dropdownApartment():ResponseInterface{
        $district_code = $this->request->getGet('district_code');

        $list_apartment = [0 => "Chọn Dự Án"];

        foreach ($this->GhApartment->get(['district_code' => $district_code, 'active' => 'YES']) as $item){
            $list_apartment[$item->id] = $item->address_street;
        }

        if(count($list_apartment) < 2){
            return $this->response->setJSON([
                'msg' => "Không Có Dự Án",
                'status' => false,
            ]);
        }

        $dropdown = form_dropdown("dropdown-apartment",$list_apartment,"",  [
            'class' => 'form-control select2',
            'id' => 'dropdown-apartment'
        ]);

        return $this->response->setJSON([
            'dropdown' => $dropdown,
            'status' => true,
        ]);
    }



    public function dropdownRoom():ResponseInterface{
        $apartment_id = $this->request->getGet('apartment_id');

        $list_room = [0 => "Chọn Mã Phòng"];
        foreach ($this->GhRoom->get(['apartment_id' => $apartment_id, 'active' => 'YES']) as $item){
            $list_room[$item->id] = empty($item->code) ? ".. không có thông tin mã phòng .." : mb_strtoupper($item->code) . " : " . count($this->getFilesFromRoomId($item->id)) . ' file(s)' ;
        }

        if(count($list_room) < 2){
            return $this->response->setJSON([
                'msg' => "Dự Án Không Có Phòng",
                'status' => false,
            ]);
        }

        $dropdown = form_dropdown("dropdown-room",$list_room,"",  [
            'class' => 'form-control select2 text-center',
            'id' => 'dropdown-room'
        ]);

        return $this->response->setJSON([
            'dropdown' => $dropdown,
            'status' => true,
        ]);
    }

    public function submitDownload():ResponseInterface{


        $old_path_media = dirname(ROOTPATH) . '/'.env('app.oldGhPath') . '/media/apartment/';
        $room_id = $this->request->getPost('dropdown-room');
        $apartment_id = $this->request->getPost('dropdown-apartment');

        $room = $this->GhRoom->getFirstById($room_id);
        if(empty($room)){
            return $this->response->setJSON([
                'status' => false,
                'msg' => 'Phòng không tồn tại trong hệ thống'
            ]);
        }

        $apartment = $this->GhApartment->getFirstById($apartment_id);
        if(empty($apartment)){
            return $this->response->setJSON([
                'status' => false,
                'msg' => 'Dự án không tồn tại trong hệ thống'
            ]);
        }

//        $files =  $this->getFilesFromRoomId($room_id);
        $files = [
            (object)['name' => '1-apartment-287-1623046530.jpg'],
            (object)['name' => '10616-apartment-279-1664906926.png'],
            (object)['name' => '10623-apartment-88-1664941059.png'],
            (object)['name' => '10619-apartment-279-1664906926.png'],
            (object)['name' => '10617-apartment-279-1664906926.png'],
        ];

        if(empty($files)){
            return $this->response->setJSON([
                'status' => false,
                'msg' => 'Vui lòng chọn mã phòng'
            ]);
        }

        $address_slug = trim(str_replace("/","_",$apartment->address_street));
        $address_slug = trim(str_replace(",","_",$address_slug));
        $address_slug = trim(str_replace("(","_",$address_slug));
        $address_slug = trim(str_replace(")","_",$address_slug));
        $address_slug = $this->convert_vi_to_en($address_slug);
        $room_slug = $this->convert_vi_to_en($room->code);


        $zip_name = "public/media/download/DA-{$address_slug}-phong-{$room_slug}.zip"; // Zip name
        $zip = new ZipArchive();
        $zip->open($zip_name,  ZipArchive::CREATE | ZipArchive::OVERWRITE);

        foreach ($files as $f) {
            if(file_exists($old_path_media . $f->name)){
                $zip->addFromString(basename($old_path_media . $f->name), file_get_contents($old_path_media . $f->name));
            }
        }

        $zip_count = $zip->count();
        $zip->close();

        if($zip_count){
            return $this->response->download($zip_name, null);
        }

        return $this->response->setJSON([
            'status' => false,
            'msg' => 'ko thể tải về, ?? có thể ko có file ảnh'
        ]);
    }

    private function downloadChunk($file_path){
        $chunk_size = 5 * (1024 * 1024); //5 MB (= 5 242 880 bytes) per one chunk of file.

        if(file_exists($file_path))
        {
            set_time_limit(300);

            $size = intval(sprintf("%u", filesize($file_path)));

            header('Content-Type: application/octet-stream');
            header('Content-Transfer-Encoding: binary');
            header('Content-Length: '.$size);
            header('Content-Disposition: attachment;filename="'.basename($file_path).'"');

            if($size > $chunk_size)
            {
                $handle = fopen($file_path, 'rb');

                while (!feof($handle))
                {
                    print(@fread($handle, $chunk_size));

                    ob_flush();
                    flush();
                }

                fclose($handle);
            }
            else readfile($file_path);
            exit;
        }
        else echo 'File "'.$file_path.'" does not exist!';
    }

    private function getFilesFromRoomId($room_id):array{
        return $this->GhMedia->get(['room_id' => $room_id]);
    }

    function convert_vi_to_en($str):string {
        $str = preg_replace("/(à|á|ạ|ả|ã|â|ầ|ấ|ậ|ẩ|ẫ|ă|ằ|ắ|ặ|ẳ|ẵ)/", "a", $str);
        $str = preg_replace("/(è|é|ẹ|ẻ|ẽ|ê|ề|ế|ệ|ể|ễ)/", "e", $str);
        $str = preg_replace("/(ì|í|ị|ỉ|ĩ)/", "i", $str);
        $str = preg_replace("/(ò|ó|ọ|ỏ|õ|ô|ồ|ố|ộ|ổ|ỗ|ơ|ờ|ớ|ợ|ở|ỡ)/", "o", $str);
        $str = preg_replace("/(ù|ú|ụ|ủ|ũ|ư|ừ|ứ|ự|ử|ữ)/", "u", $str);
        $str = preg_replace("/(ỳ|ý|ỵ|ỷ|ỹ)/", "y", $str);
        $str = preg_replace("/(đ)/", "d", $str);
        $str = preg_replace("/(À|Á|Ạ|Ả|Ã|Â|Ầ|Ấ|Ậ|Ẩ|Ẫ|Ă|Ằ|Ắ|Ặ|Ẳ|Ẵ)/", "A", $str);
        $str = preg_replace("/(È|É|Ẹ|Ẻ|Ẽ|Ê|Ề|Ế|Ệ|Ể|Ễ)/", "E", $str);
        $str = preg_replace("/(Ì|Í|Ị|Ỉ|Ĩ)/", "I", $str);
        $str = preg_replace("/(Ò|Ó|Ọ|Ỏ|Õ|Ô|Ồ|Ố|Ộ|Ổ|Ỗ|Ơ|Ờ|Ớ|Ợ|Ở|Ỡ)/", "O", $str);
        $str = preg_replace("/(Ù|Ú|Ụ|Ủ|Ũ|Ư|Ừ|Ứ|Ự|Ử|Ữ)/", "U", $str);
        $str = preg_replace("/(Ỳ|Ý|Ỵ|Ỷ|Ỹ)/", "Y", $str);
        $str = preg_replace("/(Đ)/", "D", $str);
        return $str;
    }

}
